#ifndef _BOUNDARYUPDATES_H
#define _BOUNDARYUPDATES_H

#include "FDTDConstants.hpp"

namespace fdtd{



//************************************************************
//************************************************************
//************************************************************
//************************************************************
//************************************************************
//************************************************************
template <class Mode, Dir d, Orientation o>
struct UpdateBlochPeriodic{
	static_assert(std::is_same<EMMode, Mode>::value, "YeeUpdate needs a valid Mode");
	
};


// specialization for 3D, directional
template <>
struct UpdateBlochPeriodic<ThreeD, Dir::X, Orientation::MIN>{
	double dt, dx;

	UpdateBlochPeriodic<ThreeD, Dir::X>(double deltat, double deltax): dt(deltat), dx(deltax) {};

	template <class YeeCell>
	void operator()(YeeCell & f,
					double kx, double ky, double kz,
					double Lx, double Ly, double Lz){
		update(f, dt, dx, kx, ky, kz, Lx, Ly, Lz);
	};

	template <class YeeCell>
	static void update(YeeCell & f, double delt, double delx,
					   double kx, double ky, double kz,
					   double Lx, double Ly, double Lz){

		std::complex<double> ph = exp(1i*(kx*Lx + ky*Ly + kz*Lz));

		// x direction
		f.pmlHIxz() = f.pmlEBx()*f.pmlHIxz() + f.pmlECx()/delx*(f.Hz() - f.getNeighborMin(0).Hz());
		f.Dy() -= f.pmlHIxz()*delt;

		f.pmlHIxy() = f.pmlEBx()*f.pmlHIxy() + f.pmlECx()/delx*(f.Hy() - f.getNeighborMin(0).Hy());
		f.Dz() += f.pmlHIxy()*delt;
	};
};





//************************************************************
//************************************************************
//************************************************************
//************************************************************
//************************************************************
//************************************************************



//************************************************************
//************************************************************
//************************************************************
//************************************************************
//************************************************************
//************************************************************





//************************************************************
//************************************************************
//************************************************************
//************************************************************
//************************************************************
//************************************************************







//************************************************************
//************************************************************
//************************************************************
//************************************************************
//************************************************************
//************************************************************






//************************************************************
//************************************************************
//************************************************************
//************************************************************
//************************************************************
//************************************************************






}// end namespace fdtd

#endif